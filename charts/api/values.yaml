# Default values for api.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

apache:
  replicaCount: 1
  appEnv: prod
  appDebug: 0
  appSecret: "!ChangeMe!"
  trustedHosts: '^(localhost|{{ include "api.name" . }}-apache\.{{ .Release.Namespace }}\.svc\.cluster\.local)$'
  trustedProxies: '127.0.0.1'
  image:
    repository: php-prod
    pullPolicy: IfNotPresent
    tag: latest
  healthcheck:
    hostname: localhost
    path: /healthz
  imagePullSecrets: []
  serviceAccount:
    # Specifies whether a service account should be created
    create: true
    # Annotations to add to the service account
    annotations: {}
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: ""

  podAnnotations: {}

  podSecurityContext: {}
    # fsGroup: 2000

  securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

  service:
    type: ClusterIP
    port: 80

  ingress:
    enabled: false
    className: ""
    annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    hosts:
      - host: chart-example.local
        paths:
          - path: /
            pathType: ImplementationSpecific
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local

  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
  #   memory: 128Mi

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  nodeSelector: {}

  tolerations: []

  affinity: {}

hasura:
  fullnameOverride: api-hasura
  dbUrl: "postgresql://postgres:!ChangeMe!@api-postgres.{{ .Release.Namespace }}.svc.cluster.local/app"
  podLabels:
    component: hasura
  adminSecret: "!ChangeMe!"
  authHook: "http://api-apache.{{ .Release.Namespace }}.svc.cluster.local/hasura_auth_hook"
  extraEnvVarsSecret:
    APP_HASURA_BASIC_AUTH: "!ChangeMe!"
  extraEnvVarsCM:
    APP_BASE_URI: "http://api-apache.{{ .Release.Namespace }}.svc.cluster.local"

postgresql:
  # Set dbUrl when you want to use your own Postgres server and set `postgresql.enabled` flag to false.
  dbUrl: "postgresql://external:external@postgresql/app"
  fullnameOverride: api-postgres
  enabled: true
  postgresqlDatabase: app
  postgresqlPassword: "!ChangeMe!"
  commonLabels:
    component: postgresql
  image:
    tag: 13
  persistence:
    enabled: false

