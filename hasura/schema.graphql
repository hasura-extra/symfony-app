schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""whether this query should be cached (Hasura Cloud only)"""
directive @cached(
  """measured in seconds"""
  ttl: Int! = 60

  """refresh the cache entry"""
  refresh: Boolean! = false
) on QUERY

type Continent {
  code: ID!
  countries: [Country!]!
  name: String!
}

input ContinentFilterInput {
  code: StringQueryOperatorInput
}

type Country {
  capital: String
  code: ID!
  continent: Continent!
  currency: String
  emoji: String!
  emojiU: String!
  languages: [Language!]!
  name: String!
  native: String!
  phone: String!
  states: [State!]!
}

input CountryFilterInput {
  code: StringQueryOperatorInput
  continent: StringQueryOperatorInput
  currency: StringQueryOperatorInput
}

"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

type Language {
  code: ID!
  name: String
  native: String
  rtl: Boolean!
}

input LanguageFilterInput {
  code: StringQueryOperatorInput
}

type State {
  code: String
  country: Country!
  name: String!
}

input StringQueryOperatorInput {
  eq: String
  glob: String
  in: [String]
  ne: String
  nin: [String]
  regex: String
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean

  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """does the column NOT match the given pattern"""
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """does the column match the given SQL regular expression"""
  _similar: String
}

"""
columns and relationships of "article"
"""
type article {
  """An array relationship"""
  article_tags(
    """distinct select on columns"""
    distinct_on: [article_tag_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [article_tag_order_by!]

    """filter the rows returned"""
    where: article_tag_bool_exp
  ): [article_tag!]!

  """An aggregate relationship"""
  article_tags_aggregate(
    """distinct select on columns"""
    distinct_on: [article_tag_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [article_tag_order_by!]

    """filter the rows returned"""
    where: article_tag_bool_exp
  ): article_tag_aggregate!
  author_name: String!
  id: Int!
  title: String!
}

"""
aggregated selection of "article"
"""
type article_aggregate {
  aggregate: article_aggregate_fields
  nodes: [article!]!
}

"""
aggregate fields of "article"
"""
type article_aggregate_fields {
  avg: article_avg_fields
  count(columns: [article_select_column!], distinct: Boolean): Int!
  max: article_max_fields
  min: article_min_fields
  stddev: article_stddev_fields
  stddev_pop: article_stddev_pop_fields
  stddev_samp: article_stddev_samp_fields
  sum: article_sum_fields
  var_pop: article_var_pop_fields
  var_samp: article_var_samp_fields
  variance: article_variance_fields
}

"""aggregate avg on columns"""
type article_avg_fields {
  id: Float
}

"""
Boolean expression to filter rows from the table "article". All fields are combined with a logical 'AND'.
"""
input article_bool_exp {
  _and: [article_bool_exp!]
  _not: article_bool_exp
  _or: [article_bool_exp!]
  article_tags: article_tag_bool_exp
  author_name: String_comparison_exp
  id: Int_comparison_exp
  title: String_comparison_exp
}

"""
unique or primary key constraints on table "article"
"""
enum article_constraint {
  """unique or primary key constraint"""
  article_pkey
}

"""
input type for incrementing numeric columns in table "article"
"""
input article_inc_input {
  id: Int
}

"""
input type for inserting data into table "article"
"""
input article_insert_input {
  article_tags: article_tag_arr_rel_insert_input
  author_name: String
  id: Int
  title: String
}

"""aggregate max on columns"""
type article_max_fields {
  author_name: String
  id: Int
  title: String
}

"""aggregate min on columns"""
type article_min_fields {
  author_name: String
  id: Int
  title: String
}

"""
response of any mutation on the table "article"
"""
type article_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [article!]!
}

"""
input type for inserting object relation for remote table "article"
"""
input article_obj_rel_insert_input {
  data: article_insert_input!

  """on conflict condition"""
  on_conflict: article_on_conflict
}

"""
on conflict condition type for table "article"
"""
input article_on_conflict {
  constraint: article_constraint!
  update_columns: [article_update_column!]! = []
  where: article_bool_exp
}

"""Ordering options when selecting data from "article"."""
input article_order_by {
  article_tags_aggregate: article_tag_aggregate_order_by
  author_name: order_by
  id: order_by
  title: order_by
}

"""primary key columns input for table: article"""
input article_pk_columns_input {
  id: Int!
}

"""
select columns of table "article"
"""
enum article_select_column {
  """column name"""
  author_name

  """column name"""
  id

  """column name"""
  title
}

"""
input type for updating data in table "article"
"""
input article_set_input {
  author_name: String
  id: Int
  title: String
}

"""aggregate stddev on columns"""
type article_stddev_fields {
  id: Float
}

"""aggregate stddev_pop on columns"""
type article_stddev_pop_fields {
  id: Float
}

"""aggregate stddev_samp on columns"""
type article_stddev_samp_fields {
  id: Float
}

"""aggregate sum on columns"""
type article_sum_fields {
  id: Int
}

"""
columns and relationships of "article_tag"
"""
type article_tag {
  """An object relationship"""
  article: article!
  article_id: Int!
  id: Int!

  """An object relationship"""
  tag: tag!
  tag_id: Int!
}

"""
aggregated selection of "article_tag"
"""
type article_tag_aggregate {
  aggregate: article_tag_aggregate_fields
  nodes: [article_tag!]!
}

"""
aggregate fields of "article_tag"
"""
type article_tag_aggregate_fields {
  avg: article_tag_avg_fields
  count(columns: [article_tag_select_column!], distinct: Boolean): Int!
  max: article_tag_max_fields
  min: article_tag_min_fields
  stddev: article_tag_stddev_fields
  stddev_pop: article_tag_stddev_pop_fields
  stddev_samp: article_tag_stddev_samp_fields
  sum: article_tag_sum_fields
  var_pop: article_tag_var_pop_fields
  var_samp: article_tag_var_samp_fields
  variance: article_tag_variance_fields
}

"""
order by aggregate values of table "article_tag"
"""
input article_tag_aggregate_order_by {
  avg: article_tag_avg_order_by
  count: order_by
  max: article_tag_max_order_by
  min: article_tag_min_order_by
  stddev: article_tag_stddev_order_by
  stddev_pop: article_tag_stddev_pop_order_by
  stddev_samp: article_tag_stddev_samp_order_by
  sum: article_tag_sum_order_by
  var_pop: article_tag_var_pop_order_by
  var_samp: article_tag_var_samp_order_by
  variance: article_tag_variance_order_by
}

"""
input type for inserting array relation for remote table "article_tag"
"""
input article_tag_arr_rel_insert_input {
  data: [article_tag_insert_input!]!

  """on conflict condition"""
  on_conflict: article_tag_on_conflict
}

"""aggregate avg on columns"""
type article_tag_avg_fields {
  article_id: Float
  id: Float
  tag_id: Float
}

"""
order by avg() on columns of table "article_tag"
"""
input article_tag_avg_order_by {
  article_id: order_by
  id: order_by
  tag_id: order_by
}

"""
Boolean expression to filter rows from the table "article_tag". All fields are combined with a logical 'AND'.
"""
input article_tag_bool_exp {
  _and: [article_tag_bool_exp!]
  _not: article_tag_bool_exp
  _or: [article_tag_bool_exp!]
  article: article_bool_exp
  article_id: Int_comparison_exp
  id: Int_comparison_exp
  tag: tag_bool_exp
  tag_id: Int_comparison_exp
}

"""
unique or primary key constraints on table "article_tag"
"""
enum article_tag_constraint {
  """unique or primary key constraint"""
  article_tag_pkey
}

"""
input type for incrementing numeric columns in table "article_tag"
"""
input article_tag_inc_input {
  article_id: Int
  id: Int
  tag_id: Int
}

"""
input type for inserting data into table "article_tag"
"""
input article_tag_insert_input {
  article: article_obj_rel_insert_input
  article_id: Int
  id: Int
  tag: tag_obj_rel_insert_input
  tag_id: Int
}

"""aggregate max on columns"""
type article_tag_max_fields {
  article_id: Int
  id: Int
  tag_id: Int
}

"""
order by max() on columns of table "article_tag"
"""
input article_tag_max_order_by {
  article_id: order_by
  id: order_by
  tag_id: order_by
}

"""aggregate min on columns"""
type article_tag_min_fields {
  article_id: Int
  id: Int
  tag_id: Int
}

"""
order by min() on columns of table "article_tag"
"""
input article_tag_min_order_by {
  article_id: order_by
  id: order_by
  tag_id: order_by
}

"""
response of any mutation on the table "article_tag"
"""
type article_tag_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [article_tag!]!
}

"""
on conflict condition type for table "article_tag"
"""
input article_tag_on_conflict {
  constraint: article_tag_constraint!
  update_columns: [article_tag_update_column!]! = []
  where: article_tag_bool_exp
}

"""Ordering options when selecting data from "article_tag"."""
input article_tag_order_by {
  article: article_order_by
  article_id: order_by
  id: order_by
  tag: tag_order_by
  tag_id: order_by
}

"""primary key columns input for table: article_tag"""
input article_tag_pk_columns_input {
  id: Int!
}

"""
select columns of table "article_tag"
"""
enum article_tag_select_column {
  """column name"""
  article_id

  """column name"""
  id

  """column name"""
  tag_id
}

"""
input type for updating data in table "article_tag"
"""
input article_tag_set_input {
  article_id: Int
  id: Int
  tag_id: Int
}

"""aggregate stddev on columns"""
type article_tag_stddev_fields {
  article_id: Float
  id: Float
  tag_id: Float
}

"""
order by stddev() on columns of table "article_tag"
"""
input article_tag_stddev_order_by {
  article_id: order_by
  id: order_by
  tag_id: order_by
}

"""aggregate stddev_pop on columns"""
type article_tag_stddev_pop_fields {
  article_id: Float
  id: Float
  tag_id: Float
}

"""
order by stddev_pop() on columns of table "article_tag"
"""
input article_tag_stddev_pop_order_by {
  article_id: order_by
  id: order_by
  tag_id: order_by
}

"""aggregate stddev_samp on columns"""
type article_tag_stddev_samp_fields {
  article_id: Float
  id: Float
  tag_id: Float
}

"""
order by stddev_samp() on columns of table "article_tag"
"""
input article_tag_stddev_samp_order_by {
  article_id: order_by
  id: order_by
  tag_id: order_by
}

"""aggregate sum on columns"""
type article_tag_sum_fields {
  article_id: Int
  id: Int
  tag_id: Int
}

"""
order by sum() on columns of table "article_tag"
"""
input article_tag_sum_order_by {
  article_id: order_by
  id: order_by
  tag_id: order_by
}

"""
update columns of table "article_tag"
"""
enum article_tag_update_column {
  """column name"""
  article_id

  """column name"""
  id

  """column name"""
  tag_id
}

"""aggregate var_pop on columns"""
type article_tag_var_pop_fields {
  article_id: Float
  id: Float
  tag_id: Float
}

"""
order by var_pop() on columns of table "article_tag"
"""
input article_tag_var_pop_order_by {
  article_id: order_by
  id: order_by
  tag_id: order_by
}

"""aggregate var_samp on columns"""
type article_tag_var_samp_fields {
  article_id: Float
  id: Float
  tag_id: Float
}

"""
order by var_samp() on columns of table "article_tag"
"""
input article_tag_var_samp_order_by {
  article_id: order_by
  id: order_by
  tag_id: order_by
}

"""aggregate variance on columns"""
type article_tag_variance_fields {
  article_id: Float
  id: Float
  tag_id: Float
}

"""
order by variance() on columns of table "article_tag"
"""
input article_tag_variance_order_by {
  article_id: order_by
  id: order_by
  tag_id: order_by
}

"""
columns and relationships of "article_tags_view"
"""
type article_tags_view {
  article_id: Int
  id: Int
  name: String
}

"""
aggregated selection of "article_tags_view"
"""
type article_tags_view_aggregate {
  aggregate: article_tags_view_aggregate_fields
  nodes: [article_tags_view!]!
}

"""
aggregate fields of "article_tags_view"
"""
type article_tags_view_aggregate_fields {
  avg: article_tags_view_avg_fields
  count(columns: [article_tags_view_select_column!], distinct: Boolean): Int!
  max: article_tags_view_max_fields
  min: article_tags_view_min_fields
  stddev: article_tags_view_stddev_fields
  stddev_pop: article_tags_view_stddev_pop_fields
  stddev_samp: article_tags_view_stddev_samp_fields
  sum: article_tags_view_sum_fields
  var_pop: article_tags_view_var_pop_fields
  var_samp: article_tags_view_var_samp_fields
  variance: article_tags_view_variance_fields
}

"""aggregate avg on columns"""
type article_tags_view_avg_fields {
  article_id: Float
  id: Float
}

"""
Boolean expression to filter rows from the table "article_tags_view". All fields are combined with a logical 'AND'.
"""
input article_tags_view_bool_exp {
  _and: [article_tags_view_bool_exp!]
  _not: article_tags_view_bool_exp
  _or: [article_tags_view_bool_exp!]
  article_id: Int_comparison_exp
  id: Int_comparison_exp
  name: String_comparison_exp
}

"""aggregate max on columns"""
type article_tags_view_max_fields {
  article_id: Int
  id: Int
  name: String
}

"""aggregate min on columns"""
type article_tags_view_min_fields {
  article_id: Int
  id: Int
  name: String
}

"""Ordering options when selecting data from "article_tags_view"."""
input article_tags_view_order_by {
  article_id: order_by
  id: order_by
  name: order_by
}

"""
select columns of table "article_tags_view"
"""
enum article_tags_view_select_column {
  """column name"""
  article_id

  """column name"""
  id

  """column name"""
  name
}

"""aggregate stddev on columns"""
type article_tags_view_stddev_fields {
  article_id: Float
  id: Float
}

"""aggregate stddev_pop on columns"""
type article_tags_view_stddev_pop_fields {
  article_id: Float
  id: Float
}

"""aggregate stddev_samp on columns"""
type article_tags_view_stddev_samp_fields {
  article_id: Float
  id: Float
}

"""aggregate sum on columns"""
type article_tags_view_sum_fields {
  article_id: Int
  id: Int
}

"""aggregate var_pop on columns"""
type article_tags_view_var_pop_fields {
  article_id: Float
  id: Float
}

"""aggregate var_samp on columns"""
type article_tags_view_var_samp_fields {
  article_id: Float
  id: Float
}

"""aggregate variance on columns"""
type article_tags_view_variance_fields {
  article_id: Float
  id: Float
}

"""
update columns of table "article"
"""
enum article_update_column {
  """column name"""
  author_name

  """column name"""
  id

  """column name"""
  title
}

"""aggregate var_pop on columns"""
type article_var_pop_fields {
  id: Float
}

"""aggregate var_samp on columns"""
type article_var_samp_fields {
  id: Float
}

"""aggregate variance on columns"""
type article_variance_fields {
  id: Float
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "article"
  """
  delete_article(
    """filter the rows which have to be deleted"""
    where: article_bool_exp!
  ): article_mutation_response

  """
  delete single row from the table: "article"
  """
  delete_article_by_pk(id: Int!): article

  """
  delete data from the table: "article_tag"
  """
  delete_article_tag(
    """filter the rows which have to be deleted"""
    where: article_tag_bool_exp!
  ): article_tag_mutation_response

  """
  delete single row from the table: "article_tag"
  """
  delete_article_tag_by_pk(id: Int!): article_tag

  """
  delete data from the table: "tag"
  """
  delete_tag(
    """filter the rows which have to be deleted"""
    where: tag_bool_exp!
  ): tag_mutation_response

  """
  delete single row from the table: "tag"
  """
  delete_tag_by_pk(id: Int!): tag

  """
  delete data from the table: "user"
  """
  delete_user(
    """filter the rows which have to be deleted"""
    where: user_bool_exp!
  ): user_mutation_response

  """
  delete single row from the table: "user"
  """
  delete_user_by_pk(id: Int!): user

  """
  insert data into the table: "article"
  """
  insert_article(
    """the rows to be inserted"""
    objects: [article_insert_input!]!

    """on conflict condition"""
    on_conflict: article_on_conflict
  ): article_mutation_response

  """
  insert a single row into the table: "article"
  """
  insert_article_one(
    """the row to be inserted"""
    object: article_insert_input!

    """on conflict condition"""
    on_conflict: article_on_conflict
  ): article

  """
  insert data into the table: "article_tag"
  """
  insert_article_tag(
    """the rows to be inserted"""
    objects: [article_tag_insert_input!]!

    """on conflict condition"""
    on_conflict: article_tag_on_conflict
  ): article_tag_mutation_response

  """
  insert a single row into the table: "article_tag"
  """
  insert_article_tag_one(
    """the row to be inserted"""
    object: article_tag_insert_input!

    """on conflict condition"""
    on_conflict: article_tag_on_conflict
  ): article_tag

  """
  insert data into the table: "tag"
  """
  insert_tag(
    """the rows to be inserted"""
    objects: [tag_insert_input!]!

    """on conflict condition"""
    on_conflict: tag_on_conflict
  ): tag_mutation_response

  """
  insert a single row into the table: "tag"
  """
  insert_tag_one(
    """the row to be inserted"""
    object: tag_insert_input!

    """on conflict condition"""
    on_conflict: tag_on_conflict
  ): tag

  """
  insert data into the table: "user"
  """
  insert_user(
    """the rows to be inserted"""
    objects: [user_insert_input!]!

    """on conflict condition"""
    on_conflict: user_on_conflict
  ): user_mutation_response

  """
  insert a single row into the table: "user"
  """
  insert_user_one(
    """the row to be inserted"""
    object: user_insert_input!

    """on conflict condition"""
    on_conflict: user_on_conflict
  ): user

  """
  update data of the table: "article"
  """
  update_article(
    """
    increments the numeric columns with given value of the filtered values
    """
    _inc: article_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: article_set_input

    """filter the rows which have to be updated"""
    where: article_bool_exp!
  ): article_mutation_response

  """
  update single row of the table: "article"
  """
  update_article_by_pk(
    """
    increments the numeric columns with given value of the filtered values
    """
    _inc: article_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: article_set_input
    pk_columns: article_pk_columns_input!
  ): article

  """
  update data of the table: "article_tag"
  """
  update_article_tag(
    """
    increments the numeric columns with given value of the filtered values
    """
    _inc: article_tag_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: article_tag_set_input

    """filter the rows which have to be updated"""
    where: article_tag_bool_exp!
  ): article_tag_mutation_response

  """
  update single row of the table: "article_tag"
  """
  update_article_tag_by_pk(
    """
    increments the numeric columns with given value of the filtered values
    """
    _inc: article_tag_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: article_tag_set_input
    pk_columns: article_tag_pk_columns_input!
  ): article_tag

  """
  update data of the table: "tag"
  """
  update_tag(
    """
    increments the numeric columns with given value of the filtered values
    """
    _inc: tag_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: tag_set_input

    """filter the rows which have to be updated"""
    where: tag_bool_exp!
  ): tag_mutation_response

  """
  update single row of the table: "tag"
  """
  update_tag_by_pk(
    """
    increments the numeric columns with given value of the filtered values
    """
    _inc: tag_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: tag_set_input
    pk_columns: tag_pk_columns_input!
  ): tag

  """
  update data of the table: "user"
  """
  update_user(
    """
    increments the numeric columns with given value of the filtered values
    """
    _inc: user_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: user_set_input

    """filter the rows which have to be updated"""
    where: user_bool_exp!
  ): user_mutation_response

  """
  update single row of the table: "user"
  """
  update_user_by_pk(
    """
    increments the numeric columns with given value of the filtered values
    """
    _inc: user_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: user_set_input
    pk_columns: user_pk_columns_input!
  ): user
}

"""column ordering options"""
enum order_by {
  """in ascending order, nulls last"""
  asc

  """in ascending order, nulls first"""
  asc_nulls_first

  """in ascending order, nulls last"""
  asc_nulls_last

  """in descending order, nulls first"""
  desc

  """in descending order, nulls first"""
  desc_nulls_first

  """in descending order, nulls last"""
  desc_nulls_last
}

type query_root {
  """
  fetch data from the table: "article"
  """
  article(
    """distinct select on columns"""
    distinct_on: [article_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [article_order_by!]

    """filter the rows returned"""
    where: article_bool_exp
  ): [article!]!

  """
  fetch aggregated fields from the table: "article"
  """
  article_aggregate(
    """distinct select on columns"""
    distinct_on: [article_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [article_order_by!]

    """filter the rows returned"""
    where: article_bool_exp
  ): article_aggregate!

  """fetch data from the table: "article" using primary key columns"""
  article_by_pk(id: Int!): article

  """
  fetch data from the table: "article_tag"
  """
  article_tag(
    """distinct select on columns"""
    distinct_on: [article_tag_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [article_tag_order_by!]

    """filter the rows returned"""
    where: article_tag_bool_exp
  ): [article_tag!]!

  """
  fetch aggregated fields from the table: "article_tag"
  """
  article_tag_aggregate(
    """distinct select on columns"""
    distinct_on: [article_tag_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [article_tag_order_by!]

    """filter the rows returned"""
    where: article_tag_bool_exp
  ): article_tag_aggregate!

  """fetch data from the table: "article_tag" using primary key columns"""
  article_tag_by_pk(id: Int!): article_tag

  """
  fetch data from the table: "article_tags_view"
  """
  article_tags_view(
    """distinct select on columns"""
    distinct_on: [article_tags_view_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [article_tags_view_order_by!]

    """filter the rows returned"""
    where: article_tags_view_bool_exp
  ): [article_tags_view!]!

  """
  fetch aggregated fields from the table: "article_tags_view"
  """
  article_tags_view_aggregate(
    """distinct select on columns"""
    distinct_on: [article_tags_view_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [article_tags_view_order_by!]

    """filter the rows returned"""
    where: article_tags_view_bool_exp
  ): article_tags_view_aggregate!
  continent(code: ID!): Continent
  continents(filter: ContinentFilterInput): [Continent!]!
  countries(filter: CountryFilterInput): [Country!]!
  country(code: ID!): Country
  language(code: ID!): Language
  languages(filter: LanguageFilterInput): [Language!]!

  """
  fetch data from the table: "tag"
  """
  tag(
    """distinct select on columns"""
    distinct_on: [tag_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tag_order_by!]

    """filter the rows returned"""
    where: tag_bool_exp
  ): [tag!]!

  """
  fetch aggregated fields from the table: "tag"
  """
  tag_aggregate(
    """distinct select on columns"""
    distinct_on: [tag_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tag_order_by!]

    """filter the rows returned"""
    where: tag_bool_exp
  ): tag_aggregate!

  """
  fetch data from the table: "tag_articles_view"
  """
  tag_articles_view(
    """distinct select on columns"""
    distinct_on: [tag_articles_view_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tag_articles_view_order_by!]

    """filter the rows returned"""
    where: tag_articles_view_bool_exp
  ): [tag_articles_view!]!

  """
  fetch aggregated fields from the table: "tag_articles_view"
  """
  tag_articles_view_aggregate(
    """distinct select on columns"""
    distinct_on: [tag_articles_view_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tag_articles_view_order_by!]

    """filter the rows returned"""
    where: tag_articles_view_bool_exp
  ): tag_articles_view_aggregate!

  """fetch data from the table: "tag" using primary key columns"""
  tag_by_pk(id: Int!): tag

  """
  fetch data from the table: "user"
  """
  user(
    """distinct select on columns"""
    distinct_on: [user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_order_by!]

    """filter the rows returned"""
    where: user_bool_exp
  ): [user!]!

  """
  fetch aggregated fields from the table: "user"
  """
  user_aggregate(
    """distinct select on columns"""
    distinct_on: [user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_order_by!]

    """filter the rows returned"""
    where: user_bool_exp
  ): user_aggregate!

  """fetch data from the table: "user" using primary key columns"""
  user_by_pk(id: Int!): user
}

type subscription_root {
  """
  fetch data from the table: "article"
  """
  article(
    """distinct select on columns"""
    distinct_on: [article_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [article_order_by!]

    """filter the rows returned"""
    where: article_bool_exp
  ): [article!]!

  """
  fetch aggregated fields from the table: "article"
  """
  article_aggregate(
    """distinct select on columns"""
    distinct_on: [article_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [article_order_by!]

    """filter the rows returned"""
    where: article_bool_exp
  ): article_aggregate!

  """fetch data from the table: "article" using primary key columns"""
  article_by_pk(id: Int!): article

  """
  fetch data from the table: "article_tag"
  """
  article_tag(
    """distinct select on columns"""
    distinct_on: [article_tag_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [article_tag_order_by!]

    """filter the rows returned"""
    where: article_tag_bool_exp
  ): [article_tag!]!

  """
  fetch aggregated fields from the table: "article_tag"
  """
  article_tag_aggregate(
    """distinct select on columns"""
    distinct_on: [article_tag_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [article_tag_order_by!]

    """filter the rows returned"""
    where: article_tag_bool_exp
  ): article_tag_aggregate!

  """fetch data from the table: "article_tag" using primary key columns"""
  article_tag_by_pk(id: Int!): article_tag

  """
  fetch data from the table: "article_tags_view"
  """
  article_tags_view(
    """distinct select on columns"""
    distinct_on: [article_tags_view_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [article_tags_view_order_by!]

    """filter the rows returned"""
    where: article_tags_view_bool_exp
  ): [article_tags_view!]!

  """
  fetch aggregated fields from the table: "article_tags_view"
  """
  article_tags_view_aggregate(
    """distinct select on columns"""
    distinct_on: [article_tags_view_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [article_tags_view_order_by!]

    """filter the rows returned"""
    where: article_tags_view_bool_exp
  ): article_tags_view_aggregate!

  """
  fetch data from the table: "tag"
  """
  tag(
    """distinct select on columns"""
    distinct_on: [tag_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tag_order_by!]

    """filter the rows returned"""
    where: tag_bool_exp
  ): [tag!]!

  """
  fetch aggregated fields from the table: "tag"
  """
  tag_aggregate(
    """distinct select on columns"""
    distinct_on: [tag_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tag_order_by!]

    """filter the rows returned"""
    where: tag_bool_exp
  ): tag_aggregate!

  """
  fetch data from the table: "tag_articles_view"
  """
  tag_articles_view(
    """distinct select on columns"""
    distinct_on: [tag_articles_view_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tag_articles_view_order_by!]

    """filter the rows returned"""
    where: tag_articles_view_bool_exp
  ): [tag_articles_view!]!

  """
  fetch aggregated fields from the table: "tag_articles_view"
  """
  tag_articles_view_aggregate(
    """distinct select on columns"""
    distinct_on: [tag_articles_view_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tag_articles_view_order_by!]

    """filter the rows returned"""
    where: tag_articles_view_bool_exp
  ): tag_articles_view_aggregate!

  """fetch data from the table: "tag" using primary key columns"""
  tag_by_pk(id: Int!): tag

  """
  fetch data from the table: "user"
  """
  user(
    """distinct select on columns"""
    distinct_on: [user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_order_by!]

    """filter the rows returned"""
    where: user_bool_exp
  ): [user!]!

  """
  fetch aggregated fields from the table: "user"
  """
  user_aggregate(
    """distinct select on columns"""
    distinct_on: [user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_order_by!]

    """filter the rows returned"""
    where: user_bool_exp
  ): user_aggregate!

  """fetch data from the table: "user" using primary key columns"""
  user_by_pk(id: Int!): user
}

"""
columns and relationships of "tag"
"""
type tag {
  """An array relationship"""
  article_tags(
    """distinct select on columns"""
    distinct_on: [article_tag_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [article_tag_order_by!]

    """filter the rows returned"""
    where: article_tag_bool_exp
  ): [article_tag!]!

  """An aggregate relationship"""
  article_tags_aggregate(
    """distinct select on columns"""
    distinct_on: [article_tag_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [article_tag_order_by!]

    """filter the rows returned"""
    where: article_tag_bool_exp
  ): article_tag_aggregate!
  id: Int!
  name: String!
}

"""
aggregated selection of "tag"
"""
type tag_aggregate {
  aggregate: tag_aggregate_fields
  nodes: [tag!]!
}

"""
aggregate fields of "tag"
"""
type tag_aggregate_fields {
  avg: tag_avg_fields
  count(columns: [tag_select_column!], distinct: Boolean): Int!
  max: tag_max_fields
  min: tag_min_fields
  stddev: tag_stddev_fields
  stddev_pop: tag_stddev_pop_fields
  stddev_samp: tag_stddev_samp_fields
  sum: tag_sum_fields
  var_pop: tag_var_pop_fields
  var_samp: tag_var_samp_fields
  variance: tag_variance_fields
}

"""
columns and relationships of "tag_articles_view"
"""
type tag_articles_view {
  author_name: String
  id: Int
  tag_id: Int
  title: String
}

"""
aggregated selection of "tag_articles_view"
"""
type tag_articles_view_aggregate {
  aggregate: tag_articles_view_aggregate_fields
  nodes: [tag_articles_view!]!
}

"""
aggregate fields of "tag_articles_view"
"""
type tag_articles_view_aggregate_fields {
  avg: tag_articles_view_avg_fields
  count(columns: [tag_articles_view_select_column!], distinct: Boolean): Int!
  max: tag_articles_view_max_fields
  min: tag_articles_view_min_fields
  stddev: tag_articles_view_stddev_fields
  stddev_pop: tag_articles_view_stddev_pop_fields
  stddev_samp: tag_articles_view_stddev_samp_fields
  sum: tag_articles_view_sum_fields
  var_pop: tag_articles_view_var_pop_fields
  var_samp: tag_articles_view_var_samp_fields
  variance: tag_articles_view_variance_fields
}

"""aggregate avg on columns"""
type tag_articles_view_avg_fields {
  id: Float
  tag_id: Float
}

"""
Boolean expression to filter rows from the table "tag_articles_view". All fields are combined with a logical 'AND'.
"""
input tag_articles_view_bool_exp {
  _and: [tag_articles_view_bool_exp!]
  _not: tag_articles_view_bool_exp
  _or: [tag_articles_view_bool_exp!]
  author_name: String_comparison_exp
  id: Int_comparison_exp
  tag_id: Int_comparison_exp
  title: String_comparison_exp
}

"""aggregate max on columns"""
type tag_articles_view_max_fields {
  author_name: String
  id: Int
  tag_id: Int
  title: String
}

"""aggregate min on columns"""
type tag_articles_view_min_fields {
  author_name: String
  id: Int
  tag_id: Int
  title: String
}

"""Ordering options when selecting data from "tag_articles_view"."""
input tag_articles_view_order_by {
  author_name: order_by
  id: order_by
  tag_id: order_by
  title: order_by
}

"""
select columns of table "tag_articles_view"
"""
enum tag_articles_view_select_column {
  """column name"""
  author_name

  """column name"""
  id

  """column name"""
  tag_id

  """column name"""
  title
}

"""aggregate stddev on columns"""
type tag_articles_view_stddev_fields {
  id: Float
  tag_id: Float
}

"""aggregate stddev_pop on columns"""
type tag_articles_view_stddev_pop_fields {
  id: Float
  tag_id: Float
}

"""aggregate stddev_samp on columns"""
type tag_articles_view_stddev_samp_fields {
  id: Float
  tag_id: Float
}

"""aggregate sum on columns"""
type tag_articles_view_sum_fields {
  id: Int
  tag_id: Int
}

"""aggregate var_pop on columns"""
type tag_articles_view_var_pop_fields {
  id: Float
  tag_id: Float
}

"""aggregate var_samp on columns"""
type tag_articles_view_var_samp_fields {
  id: Float
  tag_id: Float
}

"""aggregate variance on columns"""
type tag_articles_view_variance_fields {
  id: Float
  tag_id: Float
}

"""aggregate avg on columns"""
type tag_avg_fields {
  id: Float
}

"""
Boolean expression to filter rows from the table "tag". All fields are combined with a logical 'AND'.
"""
input tag_bool_exp {
  _and: [tag_bool_exp!]
  _not: tag_bool_exp
  _or: [tag_bool_exp!]
  article_tags: article_tag_bool_exp
  id: Int_comparison_exp
  name: String_comparison_exp
}

"""
unique or primary key constraints on table "tag"
"""
enum tag_constraint {
  """unique or primary key constraint"""
  tag_pkey
}

"""
input type for incrementing numeric columns in table "tag"
"""
input tag_inc_input {
  id: Int
}

"""
input type for inserting data into table "tag"
"""
input tag_insert_input {
  article_tags: article_tag_arr_rel_insert_input
  id: Int
  name: String
}

"""aggregate max on columns"""
type tag_max_fields {
  id: Int
  name: String
}

"""aggregate min on columns"""
type tag_min_fields {
  id: Int
  name: String
}

"""
response of any mutation on the table "tag"
"""
type tag_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [tag!]!
}

"""
input type for inserting object relation for remote table "tag"
"""
input tag_obj_rel_insert_input {
  data: tag_insert_input!

  """on conflict condition"""
  on_conflict: tag_on_conflict
}

"""
on conflict condition type for table "tag"
"""
input tag_on_conflict {
  constraint: tag_constraint!
  update_columns: [tag_update_column!]! = []
  where: tag_bool_exp
}

"""Ordering options when selecting data from "tag"."""
input tag_order_by {
  article_tags_aggregate: article_tag_aggregate_order_by
  id: order_by
  name: order_by
}

"""primary key columns input for table: tag"""
input tag_pk_columns_input {
  id: Int!
}

"""
select columns of table "tag"
"""
enum tag_select_column {
  """column name"""
  id

  """column name"""
  name
}

"""
input type for updating data in table "tag"
"""
input tag_set_input {
  id: Int
  name: String
}

"""aggregate stddev on columns"""
type tag_stddev_fields {
  id: Float
}

"""aggregate stddev_pop on columns"""
type tag_stddev_pop_fields {
  id: Float
}

"""aggregate stddev_samp on columns"""
type tag_stddev_samp_fields {
  id: Float
}

"""aggregate sum on columns"""
type tag_sum_fields {
  id: Int
}

"""
update columns of table "tag"
"""
enum tag_update_column {
  """column name"""
  id

  """column name"""
  name
}

"""aggregate var_pop on columns"""
type tag_var_pop_fields {
  id: Float
}

"""aggregate var_samp on columns"""
type tag_var_samp_fields {
  id: Float
}

"""aggregate variance on columns"""
type tag_variance_fields {
  id: Float
}

"""
columns and relationships of "user"
"""
type user {
  email: String!
  id: Int!
  name: String!
  password: String!
}

"""
aggregated selection of "user"
"""
type user_aggregate {
  aggregate: user_aggregate_fields
  nodes: [user!]!
}

"""
aggregate fields of "user"
"""
type user_aggregate_fields {
  avg: user_avg_fields
  count(columns: [user_select_column!], distinct: Boolean): Int!
  max: user_max_fields
  min: user_min_fields
  stddev: user_stddev_fields
  stddev_pop: user_stddev_pop_fields
  stddev_samp: user_stddev_samp_fields
  sum: user_sum_fields
  var_pop: user_var_pop_fields
  var_samp: user_var_samp_fields
  variance: user_variance_fields
}

"""aggregate avg on columns"""
type user_avg_fields {
  id: Float
}

"""
Boolean expression to filter rows from the table "user". All fields are combined with a logical 'AND'.
"""
input user_bool_exp {
  _and: [user_bool_exp!]
  _not: user_bool_exp
  _or: [user_bool_exp!]
  email: String_comparison_exp
  id: Int_comparison_exp
  name: String_comparison_exp
  password: String_comparison_exp
}

"""
unique or primary key constraints on table "user"
"""
enum user_constraint {
  """unique or primary key constraint"""
  user_pkey
}

"""
input type for incrementing numeric columns in table "user"
"""
input user_inc_input {
  id: Int
}

"""
input type for inserting data into table "user"
"""
input user_insert_input {
  email: String
  id: Int
  name: String
  password: String
}

"""aggregate max on columns"""
type user_max_fields {
  email: String
  id: Int
  name: String
  password: String
}

"""aggregate min on columns"""
type user_min_fields {
  email: String
  id: Int
  name: String
  password: String
}

"""
response of any mutation on the table "user"
"""
type user_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [user!]!
}

"""
on conflict condition type for table "user"
"""
input user_on_conflict {
  constraint: user_constraint!
  update_columns: [user_update_column!]! = []
  where: user_bool_exp
}

"""Ordering options when selecting data from "user"."""
input user_order_by {
  email: order_by
  id: order_by
  name: order_by
  password: order_by
}

"""primary key columns input for table: user"""
input user_pk_columns_input {
  id: Int!
}

"""
select columns of table "user"
"""
enum user_select_column {
  """column name"""
  email

  """column name"""
  id

  """column name"""
  name

  """column name"""
  password
}

"""
input type for updating data in table "user"
"""
input user_set_input {
  email: String
  id: Int
  name: String
  password: String
}

"""aggregate stddev on columns"""
type user_stddev_fields {
  id: Float
}

"""aggregate stddev_pop on columns"""
type user_stddev_pop_fields {
  id: Float
}

"""aggregate stddev_samp on columns"""
type user_stddev_samp_fields {
  id: Float
}

"""aggregate sum on columns"""
type user_sum_fields {
  id: Int
}

"""
update columns of table "user"
"""
enum user_update_column {
  """column name"""
  email

  """column name"""
  id

  """column name"""
  name

  """column name"""
  password
}

"""aggregate var_pop on columns"""
type user_var_pop_fields {
  id: Float
}

"""aggregate var_samp on columns"""
type user_var_samp_fields {
  id: Float
}

"""aggregate variance on columns"""
type user_variance_fields {
  id: Float
}
